import * as React from 'react';
import { IconButtonProps } from '@mui/material/IconButton';
import { MenuItemProps } from '@mui/material/MenuItem';
export type GridActionsCellItemProps = {
    label: string;
    icon?: React.ReactElement;
    /** from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component */
    component?: React.ElementType;
} & (({
    showInMenu?: false;
    icon: React.ReactElement;
} & IconButtonProps) | ({
    showInMenu: true;
} & MenuItemProps));
declare const GridActionsCellItem: React.ForwardRefExoticComponent<(Omit<{
    label: string;
    icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    /** from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component */
    component?: React.ElementType<any> | undefined;
} & {
    showInMenu?: false | undefined;
    icon: React.ReactElement;
} & import("@mui/material/IconButton").IconButtonOwnProps & Omit<import("@mui/material").ButtonBaseOwnProps, "classes"> & import("@mui/material/OverridableComponent").CommonProps & Omit<Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | React.RefObject<HTMLButtonElement> | null | undefined;
}, "color" | "size" | "style" | "disabled" | "action" | "className" | "tabIndex" | "children" | "sx" | "classes" | "centerRipple" | "disableRipple" | "disableTouchRipple" | "focusRipple" | "focusVisibleClassName" | "LinkComponent" | "onFocusVisible" | "TouchRippleProps" | "touchRippleRef" | "disableFocusRipple" | "edge"> & {
    component?: React.ElementType<any> | undefined;
}, "ref"> | Omit<{
    label: string;
    icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    /** from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component */
    component?: React.ElementType<any> | undefined;
} & {
    showInMenu: true;
} & import("@mui/material/MenuItem").MenuItemOwnProps & Omit<import("@mui/material").ButtonBaseOwnProps, "classes"> & import("@mui/material/OverridableComponent").CommonProps & Omit<Omit<React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>, "ref"> & {
    ref?: ((instance: HTMLLIElement | null) => void) | React.RefObject<HTMLLIElement> | null | undefined;
}, "style" | "dense" | "disabled" | "action" | "autoFocus" | "className" | "tabIndex" | "selected" | "children" | "sx" | "classes" | "disableGutters" | "divider" | "centerRipple" | "disableRipple" | "disableTouchRipple" | "focusRipple" | "focusVisibleClassName" | "LinkComponent" | "onFocusVisible" | "TouchRippleProps" | "touchRippleRef"> & {
    component?: React.ElementType<any> | undefined;
}, "ref">) & React.RefAttributes<HTMLButtonElement>>;
export { GridActionsCellItem };
